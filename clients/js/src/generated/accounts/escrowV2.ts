/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type EscrowV2 = Account<EscrowV2AccountData>;

export type EscrowV2AccountData = {
  discriminator: Array<number>;
  authority: PublicKey;
  bump: number;
};

export type EscrowV2AccountDataArgs = { authority: PublicKey; bump: number };

export function getEscrowV2AccountDataSerializer(): Serializer<
  EscrowV2AccountDataArgs,
  EscrowV2AccountData
> {
  return mapSerializer<EscrowV2AccountDataArgs, any, EscrowV2AccountData>(
    struct<EscrowV2AccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['authority', publicKeySerializer()],
        ['bump', u8()],
      ],
      { description: 'EscrowV2AccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [229, 26, 241, 181, 158, 158, 70, 190],
    })
  ) as Serializer<EscrowV2AccountDataArgs, EscrowV2AccountData>;
}

export function deserializeEscrowV2(rawAccount: RpcAccount): EscrowV2 {
  return deserializeAccount(rawAccount, getEscrowV2AccountDataSerializer());
}

export async function fetchEscrowV2(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<EscrowV2> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'EscrowV2');
  return deserializeEscrowV2(maybeAccount);
}

export async function safeFetchEscrowV2(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<EscrowV2 | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeEscrowV2(maybeAccount) : null;
}

export async function fetchAllEscrowV2(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<EscrowV2[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'EscrowV2');
    return deserializeEscrowV2(maybeAccount);
  });
}

export async function safeFetchAllEscrowV2(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<EscrowV2[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeEscrowV2(maybeAccount as RpcAccount));
}

export function getEscrowV2GpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplHybrid',
    'MPL4o4wMzndgh8T1NVDxELQCj5UQfYTYEkabX3wNKtb'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      authority: PublicKey;
      bump: number;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      authority: [8, publicKeySerializer()],
      bump: [40, u8()],
    })
    .deserializeUsing<EscrowV2>((account) => deserializeEscrowV2(account))
    .whereField('discriminator', [229, 26, 241, 181, 158, 158, 70, 190]);
}

export function getEscrowV2Size(): number {
  return 41;
}
