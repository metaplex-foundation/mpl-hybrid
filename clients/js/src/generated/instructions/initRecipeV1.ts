/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { findAssociatedTokenPda } from '@metaplex-foundation/mpl-toolbox';
import {
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  none,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  option,
  string,
  struct,
  u16,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findRecipeV1Pda } from '../accounts';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';
import {
  RerollV2Setting,
  RerollV2SettingArgs,
  getRerollV2SettingSerializer,
} from '../types';

// Accounts.
export type InitRecipeV1InstructionAccounts = {
  recipe?: PublicKey | Pda;
  authority?: Signer;
  collection: PublicKey | Pda;
  token: PublicKey | Pda;
  feeLocation: PublicKey | Pda;
  /** The ATA for token fees to be stored */
  feeAta?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  associatedTokenProgram?: PublicKey | Pda;
};

// Data.
export type InitRecipeV1InstructionData = {
  discriminator: Array<number>;
  name: string;
  uri: string;
  max: bigint;
  min: bigint;
  amount: bigint;
  feeAmountCapture: bigint;
  feeAmountRelease: bigint;
  solFeeAmountCapture: bigint;
  solFeeAmountRelease: bigint;
  path: number;
  rerollV2Setting: Option<RerollV2Setting>;
};

export type InitRecipeV1InstructionDataArgs = {
  name: string;
  uri: string;
  max: number | bigint;
  min: number | bigint;
  amount: number | bigint;
  feeAmountCapture: number | bigint;
  feeAmountRelease: number | bigint;
  solFeeAmountCapture: number | bigint;
  solFeeAmountRelease: number | bigint;
  path: number;
  rerollV2Setting?: OptionOrNullable<RerollV2SettingArgs>;
};

export function getInitRecipeV1InstructionDataSerializer(): Serializer<
  InitRecipeV1InstructionDataArgs,
  InitRecipeV1InstructionData
> {
  return mapSerializer<
    InitRecipeV1InstructionDataArgs,
    any,
    InitRecipeV1InstructionData
  >(
    struct<InitRecipeV1InstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['name', string()],
        ['uri', string()],
        ['max', u64()],
        ['min', u64()],
        ['amount', u64()],
        ['feeAmountCapture', u64()],
        ['feeAmountRelease', u64()],
        ['solFeeAmountCapture', u64()],
        ['solFeeAmountRelease', u64()],
        ['path', u16()],
        ['rerollV2Setting', option(getRerollV2SettingSerializer())],
      ],
      { description: 'InitRecipeV1InstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [212, 22, 246, 254, 234, 63, 108, 246],
      rerollV2Setting: value.rerollV2Setting ?? none(),
    })
  ) as Serializer<InitRecipeV1InstructionDataArgs, InitRecipeV1InstructionData>;
}

// Args.
export type InitRecipeV1InstructionArgs = InitRecipeV1InstructionDataArgs;

// Instruction.
export function initRecipeV1(
  context: Pick<Context, 'eddsa' | 'identity' | 'programs'>,
  input: InitRecipeV1InstructionAccounts & InitRecipeV1InstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplHybrid',
    'MPL4o4wMzndgh8T1NVDxELQCj5UQfYTYEkabX3wNKtb'
  );

  // Accounts.
  const resolvedAccounts = {
    recipe: {
      index: 0,
      isWritable: true as boolean,
      value: input.recipe ?? null,
    },
    authority: {
      index: 1,
      isWritable: true as boolean,
      value: input.authority ?? null,
    },
    collection: {
      index: 2,
      isWritable: false as boolean,
      value: input.collection ?? null,
    },
    token: {
      index: 3,
      isWritable: false as boolean,
      value: input.token ?? null,
    },
    feeLocation: {
      index: 4,
      isWritable: false as boolean,
      value: input.feeLocation ?? null,
    },
    feeAta: {
      index: 5,
      isWritable: true as boolean,
      value: input.feeAta ?? null,
    },
    systemProgram: {
      index: 6,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    tokenProgram: {
      index: 7,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    associatedTokenProgram: {
      index: 8,
      isWritable: false as boolean,
      value: input.associatedTokenProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: InitRecipeV1InstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.recipe.value) {
    resolvedAccounts.recipe.value = findRecipeV1Pda(context, {
      collection: expectPublicKey(resolvedAccounts.collection.value),
    });
  }
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity;
  }
  if (!resolvedAccounts.feeAta.value) {
    resolvedAccounts.feeAta.value = findAssociatedTokenPda(context, {
      mint: expectPublicKey(resolvedAccounts.token.value),
      owner: expectPublicKey(resolvedAccounts.feeLocation.value),
    });
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.associatedTokenProgram.value) {
    resolvedAccounts.associatedTokenProgram.value = publicKey(
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
    );
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getInitRecipeV1InstructionDataSerializer().serialize(
    resolvedArgs as InitRecipeV1InstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
